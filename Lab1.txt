// Definir los pines para las luces
const int ledVerde = 11;
const int ledRojo = 12;
const int ledAmarillo = 13;

// Variables para almacenar el estado de los LEDs
bool estadoVerde = false;
bool estadoRojo = false;
bool estadoAmarillo = false;

// Prototipos de funciones
void encenderApagarVerde();
void encenderApagarRojo();
void encenderApagarAmarillo();
void encenderApagarTodas();
void modoIntermitente();

void setup() {
  // Configurar los pines de las luces como salidas
  pinMode(ledVerde, OUTPUT);
  pinMode(ledRojo, OUTPUT);
  pinMode(ledAmarillo, OUTPUT);

  // Iniciar la comunicación serial
  Serial.begin(9600);
  Serial.println("Ingrese un numero para controlar las luces:");
  Serial.println("1. Encender/Apagar luz verde");
  Serial.println("2. Encender/Apagar luz roja");
  Serial.println("3. Encender/Apagar luz amarilla");
  Serial.println("4. Encender/Apagar todas las luces");
  Serial.println("5. Modo intermitente");
}

void loop() {
  // Verificar si hay datos disponibles en el puerto serial
  if (Serial.available() > 0) {
    int opcion = Serial.read() - '0'; // Leer el número ingresado

    switch (opcion) {
      case 1:
        encenderApagarVerde();
        break;
      case 2:
        encenderApagarRojo();
        break;
      case 3:
        encenderApagarAmarillo();
        break;
      case 4:
        encenderApagarTodas();
        break;
      case 5:
        modoIntermitente();
        break;
      default:
        Serial.println("Opcion invalida");
        break;
    }
  }
}

// Función para encender o apagar la luz verde
void encenderApagarVerde() {
  estadoVerde = !estadoVerde; // Cambiar el estado de la luz verde
  digitalWrite(ledVerde, estadoVerde);
  Serial.print("Luz verde ");
  Serial.println(estadoVerde ? "encendida" : "apagada");
}

// Función para encender o apagar la luz roja
void encenderApagarRojo() {
  estadoRojo = !estadoRojo; // Cambiar el estado de la luz roja
  digitalWrite(ledRojo, estadoRojo);
  Serial.print("Luz roja ");
  Serial.println(estadoRojo ? "encendida" : "apagada");
}

// Función para encender o apagar la luz amarilla
void encenderApagarAmarillo() {
  estadoAmarillo = !estadoAmarillo; // Cambiar el estado de la luz amarilla
  digitalWrite(ledAmarillo, estadoAmarillo);
  Serial.print("Luz amarilla ");
  Serial.println(estadoAmarillo ? "encendida" : "apagada");
}

// Función para encender o apagar todas las luces
void encenderApagarTodas() {
  // Invierte el estado de todos los LEDs
  estadoVerde = !estadoVerde;
  estadoRojo = !estadoRojo;
  estadoAmarillo = !estadoAmarillo;

  // Actualiza los LEDs según sus estados
  digitalWrite(ledVerde, estadoVerde);
  digitalWrite(ledRojo, estadoRojo);
  digitalWrite(ledAmarillo, estadoAmarillo);

  // Imprime el mensaje de acuerdo al estado
  Serial.println(estadoVerde && estadoRojo && estadoAmarillo ? "Todas las luces encendidas" : "Todas las luces apagadas");
}

// Función para el modo intermitente
void modoIntermitente() {
  Serial.println("Modo intermitente activado");
  while (true) {
    digitalWrite(ledVerde, HIGH);
    digitalWrite(ledRojo, LOW);
    digitalWrite(ledAmarillo, LOW);
    delay(500);
    digitalWrite(ledVerde, LOW);
    digitalWrite(ledRojo, HIGH);
    digitalWrite(ledAmarillo, LOW);
    delay(500);
    digitalWrite(ledVerde, LOW);
    digitalWrite(ledRojo, LOW);
    digitalWrite(ledAmarillo, HIGH);
    delay(500);

    // Verificar si se ingresa otro número para salir del modo intermitente
    if (Serial.available() > 0) {
      int opcion = Serial.read() - '0';
      if (opcion != 5) {
        break;
      }
    }
  }
}